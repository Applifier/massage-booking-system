{"version":3,"sources":["services/login.js","App.js","serviceWorker.js","index.js"],"names":["services_login","login","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","credentials","response","wrap","_context","prev","next","axios","post","sent","abrupt","data","stop","_x","apply","this","arguments","WelcomeScreen","react_default","createElement","LoginForm","props","handleLoginFunction","email","password","setEmail","setPassword","onSubmit","type","value","name","onChange","target","_ref2","App","_useState","useState","_useState2","slicedToArray","_useState3","_useState4","user","setUser","_useState5","_useState6","_useState7","_useState8","_useState9","_useState10","console","log","useEffect","loggedInUserJSON","window","localStorage","getItem","JSON","parse","handleLogin","_ref3","event","loggedInUser","preventDefault","loginService","setItem","stringify","t0","App_LoginForm","App_WelcomeScreen","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5c4fa05f.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/login'\n\nconst login = async credentials => {\n  const response = await axios.post(baseUrl, credentials)\n  return response.data\n}\n\nexport default { login }","import React, { useState, useEffect } from 'react';\nimport loginService from './services/login'\n\nconst WelcomeScreen = () => {\n  return (\n    <div>Kirjauduit sisään!</div>\n  )\n}\n\nconst LoginForm = (props) => {\n  const { handleLoginFunction, email, password, setEmail, setPassword } = props\n  return (\n    <form onSubmit={handleLoginFunction}>\n      <div>Käyttäjätunnus\n      <input\n          type=\"text\"\n          value={email}\n          name=\"email\"\n          onChange={({ target }) => setEmail(target.value)}\n        />\n      </div>\n      <div>Salasana\n      <input\n          type=\"password\"\n          value={password}\n          name=\"password\"\n          onChange={({ target }) => setPassword(target.value)}\n        />\n      </div>\n      <button type=\"submit\">kirjaudu</button>\n    </form>\n  )\n}\n\nconst App = () => {\n  const [appointments, setAppointments] = useState([])\n  const [user, setUser] = useState(null)\n  const [errorMessage, setErrorMessage] = useState(null)\n  const [email, setEmail] = useState('')\n  const [password, setPassword] = useState('')\n\n  console.log('User currently', user)\n  useEffect(() => {\n    const loggedInUserJSON = window.localStorage.getItem('loggedInUser')\n    if (loggedInUserJSON) {\n      const user = JSON.parse(loggedInUserJSON)\n      setUser(user)\n\n      // Appointmentservice.setToken tms tänne\n      // Appointmentservice.setToken tms tänne\n      // Appointmentservice.setToken tms tänne\n    }\n  }, [])\n\n  const handleLogin = async (event) => {\n    event.preventDefault()\n    try {\n      const loggedInUser = await loginService.login({ email, password })\n      window.localStorage.setItem('loggedInUser', JSON.stringify(loggedInUser))\n\n      // Appointmentservice.setToken tms tänne\n      // Appointmentservice.setToken tms tänne\n      // Appointmentservice.setToken tms tänne\n\n      setUser(loggedInUser)\n      setEmail('')\n      setPassword('')\n\n      // console.log('kirjautunut käyttäjä', loggedInUser)\n    } catch (exception) {\n      console.log('virhe kirjautumisessa', exception)\n    }\n  }\n\n  return (\n    <div>\n      <h1>Unity massage booking system</h1>\n      <h2>Kirjaudu</h2>\n\n      {user === null && <LoginForm handleLoginFunction={handleLogin} email={email} setEmail={setEmail} password={password} setPassword={setPassword} />}\n      {user !== null && <WelcomeScreen />}\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}